// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3482.robot;

import org.usfirst.frc3482.robot.commands.*;

import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());

    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public Joystick joystick1;
    public Joystick buttons;
    public JoystickButton rampButton;
    public JoystickButton manualLowerArmsButton;
    public JoystickButton lowerArmsButton;
    public JoystickButton manualRaiseArmsButton;
    public JoystickButton raiseArmsButton;
    public JoystickButton openArmsButton;
    public JoystickButton resetGyroButton;

    
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        joystick1 = new Joystick(0);
        buttons = new Joystick(1);
        
        rampButton = new JoystickButton(joystick1, 1);
        rampButton.toggleWhenPressed(new ExtendRamp());
     
        manualLowerArmsButton = new JoystickButton(joystick1, 5);
        manualLowerArmsButton.whileHeld(new ManualLowerArms());
        
        lowerArmsButton = new JoystickButton(joystick1, 2);
        lowerArmsButton.whenPressed(new LowerArms());
        
        manualRaiseArmsButton = new JoystickButton(joystick1, 6);
        manualRaiseArmsButton.whileHeld(new ManualRaiseArms());
        
        raiseArmsButton = new JoystickButton(joystick1, 3);
        raiseArmsButton.whenPressed(new RaiseArms());
        
        openArmsButton = new JoystickButton(joystick1, 4);
        openArmsButton.toggleWhenPressed(new OpenArms());
        
        resetGyroButton = new JoystickButton(joystick1, 8);
        resetGyroButton.toggleWhenPressed(new ResetGyro());
        
        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());

        SmartDashboard.putData("ExtendRamp", new ExtendRamp());

        SmartDashboard.putData("OpenArms", new OpenArms());
        
        SmartDashboard.putData("ManualRaiseArms", new ManualRaiseArms());

        SmartDashboard.putData("RaiseArms", new RaiseArms());
        
        SmartDashboard.putData("ManualLowerArms", new ManualLowerArms());

        SmartDashboard.putData("LowerArms", new LowerArms());
        
        SmartDashboard.putData("Drive", new Drive());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getJoystick1() {
        return joystick1;
    }

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

