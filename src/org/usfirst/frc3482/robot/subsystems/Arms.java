// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3482.robot.subsystems;

import org.usfirst.frc3482.robot.RobotMap;
import org.usfirst.frc3482.robot.commands.*;

import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class Arms extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SpeedController arms = RobotMap.armsArms;
    DigitalInput limitSwitch1 = RobotMap.armsLimitSwitch1;
    DigitalInput limitSwitch2 = RobotMap.armsLimitSwitch2;
    DigitalInput limitSwitch3 = RobotMap.armsLimitSwitch3;
    DigitalInput limitSwitch4 = RobotMap.armsLimitSwitch4;
    DigitalInput limitSwitch5 = RobotMap.armsLimitSwitch5;
    DigitalInput[] switches = {limitSwitch1, limitSwitch2, limitSwitch3, limitSwitch4, limitSwitch5};
    DoubleSolenoid doubleSolenoid1 = RobotMap.armsDoubleSolenoid1;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    int lastDirection = 1;
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    
    public void open()
    {
    	doubleSolenoid1.set(DoubleSolenoid.Value.kForward);
    }
    
    public void close()
    {
    	doubleSolenoid1.set(DoubleSolenoid.Value.kReverse);
    }
    
    // precondition:
    // you are at an arbitrary step 
    // figure out whic pos it is at
    

    
    public void stepUp()
    {
    	int pos = 0;
    	if (!limitSwitch5.get())
    	{
    		// find which pos we are at
    		pos = getLocation();
    		// we are at pos
    		while(!switches[pos + 1].get())
    		{
    			arms.set(1);
    		}
    	}
    }
    
    public void stepDown()
    {
    	int pos = 0;
    	if (!limitSwitch1.get())
    	{
    		// find which pos we are at
    		pos = getLocation();
    		// we are at pos
    		while(!switches[pos - 1].get())
    		{
    			arms.set(-1);
    		}
    	}
    }
    
    public void setLevel(int level) {
    	if(level > getLocation()) {
    		while(!switches[level].get())
    		{
    			arms.set(1);
    		}
    	} else if(level < getLocation()) {
    		while(!switches[level].get())
    		{
    			arms.set(-1);
    		}
    	}
    }
    
    public void moveUp() {
    	lastDirection = 1;
    	arms.set(1);
    }
    
    public void moveDown() {
    	lastDirection = -1;
    	arms.set(-1);
    }
    
    public void stop() {
    	arms.set(0);
    }
  
    public int getLocation() {
    	for (int i = 0; i < switches.length; i++)
    	{
    		if(switches[i].get())
    		{
    			return i;
    		}
    	}
    	return -1;
    }
}

