// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3482.robot.subsystems;

import org.usfirst.frc3482.robot.RobotMap;
import org.usfirst.frc3482.robot.commands.*;
import edu.wpi.first.wpilibj.*;

import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class Chassis extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SpeedController backLeft = RobotMap.chassisBackLeft;
    SpeedController backRight = RobotMap.chassisBackRight;
    SpeedController frontRight = RobotMap.chassisFrontRight;
    SpeedController frontLeft = RobotMap.chassisFrontLeft;
    RobotDrive robotDrive41 = RobotMap.chassisRobotDrive41;
    Gyro gyro1 = RobotMap.chassisGyro1;
    Compressor compressor1 = RobotMap.chassisCompressor1;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    boolean inverted = false;
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    
    public void invertMotors() {
    	if(!inverted) {
			robotDrive41.setInvertedMotor(RobotDrive.MotorType.kFrontRight, true);
			robotDrive41.setInvertedMotor(RobotDrive.MotorType.kFrontLeft, false);
			robotDrive41.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);
			robotDrive41.setInvertedMotor(RobotDrive.MotorType.kRearLeft, false);
			inverted = true;
			System.out.println("YO THE MOTORS WERE JUST INVERTED, WATCH OUT MAN");
    	}
	}
    
    public void calibrateGyro() {
    	System.out.println("calibrating");
    	gyro1.initGyro();
    }
    
    public void resetGyro() {
    	System.out.println("reseting");
    	gyro1.reset();
    }
    
    public void startCompressor() {
    	//System.out.println("starting");
		compressor1.start();
	}
	public void stopCompressor() {
		compressor1.stop();
	}
    
	public void driveWithXboxController(Joystick s) {
		double leftX = s.getRawAxis(0);
		double leftY = s.getRawAxis(1);
		double rightX = s.getRawAxis(4);
		//System.out.println("left x: " + leftX);
		//System.out.println("y: " + leftY);
		//System.out.println("right: " + rightX);
		double deadZone = 0.2;

		if (leftX < deadZone && leftX > -deadZone) {
			leftX = 0;
		}
		if (leftY < deadZone && leftY > -deadZone) {
			leftY = 0;
		}
		if (rightX < deadZone && rightX > -deadZone) {
			rightX = 0;
		}
		
		//TODO: Gyro
		robotDrive41.mecanumDrive_Cartesian(leftX, leftY, rightX, gyro1.getAngle());

	}
	
	//moves the robot to a location
	public void move(double moveValueY, double moveValueX, double rotateValue) {
		//robotDrive41.arcadeDrive(moveValue, rotateValue);
		robotDrive41.mecanumDrive_Cartesian(moveValueX, moveValueY, rotateValue, gyro1.getAngle());
	}

	public void stop() {
		robotDrive41.stopMotor();
	}
	
	//sets the safety
	public void setSafety(boolean n) {
		robotDrive41.setSafetyEnabled(n);
	}

}

